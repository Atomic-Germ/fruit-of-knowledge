name: Build and upload book artifacts

on:
  push: {}
  workflow_dispatch: {}

jobs:
  dry-run:
    name: Dry-run and tests (non-main branches)
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install minimal build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc python3-pip

      - name: Set reproducible build epoch (commit time)
        run: echo "SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)" >> $GITHUB_ENV

      - name: Run conversion tests (examples)
        run: |
          mkdir -p out/dry_run
          # capture stdout/stderr to a log file and preserve exit code
          set +e
          make convert 2>&1 | tee out/dry_run/convert.log
          rc=$${PIPESTATUS[0]:-0}
          echo $${rc} > out/dry_run/convert.exit
          set -e
          exit $${rc}
        env:
          PANDOC: pandoc
      - name: Create fragments and master TeX (dry run)
        run: |
          mkdir -p out/dry_run
          set +e
          make book-dry 2>&1 | tee out/dry_run/book-dry.log
          rc=$${PIPESTATUS[0]:-0}
          echo $${rc} > out/dry_run/book-dry.exit
          set -e
          exit $${rc}
        env:
          PANDOC: pandoc
      - name: Produce dry-run report
        if: always()
        run: |
          mkdir -p out/dry_run
          echo "Dry run report for commit ${GITHUB_SHA} on branch ${GITHUB_REF}" > out/dry_run/report.txt
          echo "Converted fragments count:" >> out/dry_run/report.txt
          find out/book/fragments -type f | wc -l >> out/dry_run/report.txt || true
          echo "" >> out/dry_run/report.txt
          echo "Top of book.tex:" >> out/dry_run/report.txt
          head -n 200 out/book/book.tex >> out/dry_run/report.txt || true
          echo "" >> out/dry_run/report.txt
          if [ -f out/dry_run/convert.exit ]; then echo "convert exit: $(cat out/dry_run/convert.exit)" >> out/dry_run/report.txt; else echo "convert exit: missing" >> out/dry_run/report.txt; fi
          if [ -f out/dry_run/book-dry.exit ]; then echo "book-dry exit: $(cat out/dry_run/book-dry.exit)" >> out/dry_run/report.txt; else echo "book-dry exit: missing" >> out/dry_run/report.txt; fi
          echo "" >> out/dry_run/report.txt
          echo "Tail of convert log (last 200 lines):" >> out/dry_run/report.txt
          tail -n 200 out/dry_run/convert.log >> out/dry_run/report.txt 2>/dev/null || true
          echo "" >> out/dry_run/report.txt
          echo "Tail of book-dry log (last 200 lines):" >> out/dry_run/report.txt
          tail -n 200 out/dry_run/book-dry.log >> out/dry_run/report.txt 2>/dev/null || true
      - name: Ensure dry-run artifacts exist for upload
        if: always()
        run: |
          mkdir -p out/dry_run
          mkdir -p out/book/fragments
          [ -f out/dry_run/convert.log ] || echo "convert.log missing" > out/dry_run/convert.log
          [ -f out/dry_run/book-dry.log ] || echo "book-dry.log missing" > out/dry_run/book-dry.log
          [ -f out/dry_run/convert.exit ] || echo "-1" > out/dry_run/convert.exit
          [ -f out/dry_run/book-dry.exit ] || echo "-1" > out/dry_run/book-dry.exit
          [ -f out/book/book.tex ] || echo "TeX missing" > out/book/book.tex
      - name: Upload Dry Run Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Dry Run Report
          path: |
            out/dry_run/report.txt
            out/dry_run/convert.log
            out/dry_run/book-dry.log
            out/dry_run/convert.exit
            out/dry_run/book-dry.exit
            out/book/book.tex
            out/book/fragments

  build-book:
    name: Build LaTeX book and upload artifacts (main only)
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 90
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          set -e
          brew update
          # Install tools required for the Pandoc -> LaTeX -> PDF pipeline
          brew install pandoc ghostscript qpdf
          # Install mactex (provides xelatex); this is large but required for a faithful, repeatable build
          brew install --cask mactex

      - name: Add TeX binaries to PATH
        run: echo "/Library/TeX/texbin" >> $GITHUB_PATH

      - name: Set reproducible build epoch (commit time)
        run: |
          echo "SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)" >> $GITHUB_ENV
          echo "TZ=UTC" >> $GITHUB_ENV

      - name: Build book (LaTeX + PDF)
        run: make book-ci
        env:
          PANDOC: pandoc
          PDF_ENGINE: /Library/TeX/texbin/xelatex
          FAIL_ON_ERROR: '1'
      - name: Install Python PDF normalization tools
        run: |
          python3 -m pip install --upgrade pip
          pip install pikepdf

      - name: Normalize PDF metadata for reproducibility
        run: |
          python3 - <<'PY'
          import os, time
          from pikepdf import Pdf
          ts = int(os.environ.get('SOURCE_DATE_EPOCH','0'))
          if ts == 0:
              print('SOURCE_DATE_EPOCH not set; leaving PDF dates unchanged')
          pdf_date = time.strftime('D:%Y%m%d%H%M%SZ', time.gmtime(ts))
          for f in ('out/book/book.pdf','out/book/book_print_ready.pdf'):
              if os.path.exists(f):
                  p = Pdf.open(f)
                  p.docinfo['/CreationDate'] = pdf_date
                  p.docinfo['/ModDate'] = pdf_date
                  p.docinfo['/Producer'] = 'through-the-lens CI build'
                  p.save(f)
                  print('Normalized', f)
              else:
                  print('Missing', f)
          PY

      - name: Ensure artifacts exist for upload
        if: always()
        run: |
          mkdir -p out/book
          [ -f out/book/book.pdf ] || echo "PDF missing" > out/book/book.pdf
          [ -f out/book/book_print_ready.pdf ] || echo "Print-ready PDF missing" > out/book/book_print_ready.pdf
          [ -f out/book/book.tex ] || echo "TeX missing" > out/book/book.tex
          [ -f out/book/book.log ] || echo "Log missing" > out/book/book.log

      - name: Upload Book PDFs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Book (PDF)
          path: |
            out/book/book.pdf
            out/book/book_print_ready.pdf

      - name: Upload Book (TeX)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Book (TeX)
          path: out/book/book.tex

      - name: Upload Build Log
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Build Log
          path: out/book/book.log
